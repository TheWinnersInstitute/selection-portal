// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role?     @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  boards    Board[]
  exams     Exam[]
  Session   Session[]
  roleId    String?

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role?    @relation(fields: [roleId], references: [id])
  hash      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  roleId    String?

  @@map("sessions")
}

model Board {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  exams       Exam[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("boards")
}

model Exam {
  id          String   @id @default(uuid())
  name        String
  description String
  boardId     String
  userId      String
  examDate    DateTime

  examStatus ExamStatus @default(pending)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  board      Board        @relation(fields: [boardId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  Enrollment Enrollment[]

  @@unique([boardId, name])
  @@map("exams")
}

model Student {
  id            String    @id @default(uuid())
  name          String
  dateOfBirth   DateTime?
  contactNumber BigInt
  email         String?
  image         Asset?    @relation("student_image", fields: [imageId], references: [id])
  fatherName    String?
  city          String?
  state         String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  imageId    String?
  Enrollment Enrollment[]

  @@unique([name, contactNumber])
  @@map("students")
}

model Enrollment {
  id          String  @id @default(uuid())
  rollNumber  BigInt
  post        String?
  rank        String?
  selectionIn String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  result   Asset?  @relation("student_result", fields: [resultId], references: [id])
  resultId String?

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  exam   Exam   @relation(fields: [examId], references: [id])
  examId String

  @@unique([rollNumber, examId])
  @@map("enrollments")
}

model Asset {
  id            String       @id @default(uuid())
  path          String
  type          String
  studentImage  Student[]    @relation("student_image")
  studentResult Enrollment[] @relation("student_result")

  @@map("assets")
}

model Role {
  id         String    @id @default(uuid())
  name       String    @unique
  User       User[]
  Session    Session[]
  exam       Action[]
  enrollment Action[]
  board      Action[]
  student    Action[]
  user       Action[]
  role       Action[]

  @@map("roles")
}

enum Action {
  read
  create
  update
  delete
}

enum ExamStatus {
  pending
  ongoing
  ended
}
