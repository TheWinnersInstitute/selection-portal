// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role?     @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  boards    Board[]
  exams     Exam[]
  Session   Session[]
  roleId    String?
  Asset     Asset[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role?    @relation(fields: [roleId], references: [id])
  hash      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  roleId    String?

  @@map("sessions")
}

model Board {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  exams       Exam[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("boards")
}

model Exam {
  id          String   @id @default(uuid())
  name        String
  description String
  boardId     String
  userId      String
  examDate    DateTime

  examStatus ExamStatus @default(pending)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  board        Board          @relation(fields: [boardId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  Enrollment   Enrollment[]
  ExamCategory ExamCategory[]

  @@unique([boardId, name])
  @@map("exams")
}

model ExamCategory {
  id   String @id @default(uuid())
  name String
  exam Exam   @relation(fields: [examId], references: [id])

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  examId     String
  Enrollment Enrollment[]

  // @@unique([examId, name])
  @@map("exam_categories")
}

model Student {
  id            String    @id @default(uuid())
  name          String
  dateOfBirth   DateTime?
  contactNumber BigInt
  email         String?
  image         Asset?    @relation("student_image", fields: [imageId], references: [id])
  fatherName    String?
  city          String?
  state         String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  imageId    String?
  Enrollment Enrollment[]
  Asset      Asset[]

  @@unique([name, contactNumber])
  @@map("students")
}

model Enrollment {
  id          String  @id @default(uuid())
  rollNumber  BigInt
  post        String?
  rank        String?
  selectionIn String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  result   Asset?  @relation("student_result", fields: [resultId], references: [id])
  resultId String?

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  exam           Exam          @relation(fields: [examId], references: [id])
  examId         String
  examCategory   ExamCategory? @relation(fields: [examCategoryId], references: [id])
  year           Int?
  examCategoryId String?

  @@unique([rollNumber, examId])
  @@map("enrollments")
}

model Asset {
  id            String       @id @default(uuid())
  path          String
  type          String
  studentImage  Student[]    @relation("student_image")
  studentResult Enrollment[] @relation("student_result")

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  student              Student?               @relation(fields: [studentId], references: [id])
  studentId            String?
  LuckyDrawReward      LuckyDrawReward[]
  LuckyDrawParticipant LuckyDrawParticipant[]
  LuckyDraw            LuckyDraw[]

  @@map("assets")
}

model Role {
  id         String    @id @default(uuid())
  name       String    @unique
  User       User[]
  Session    Session[]
  exam       Action[]
  enrollment Action[]
  board      Action[]
  student    Action[]
  user       Action[]
  role       Action[]
  luckyDraw  Action[]  @default([])

  @@map("roles")
}

model LuckyDraw {
  id                   String          @id @default(uuid())
  name                 String          @unique
  status               LuckyDrawStatus @default(upcoming)
  participationEndDate DateTime
  openingDate          DateTime
  bannerId             String?

  banner               Asset?                 @relation(fields: [bannerId], references: [id])
  LuckyDrawParticipant LuckyDrawParticipant[]
  LuckyDrawReward      LuckyDrawReward[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("luckyDraw")
}

model LuckyDrawReward {
  id                   String                 @id @default(uuid())
  name                 String
  count                Int
  // waitingWinnersCount  Int
  luckyDraw            LuckyDraw              @relation(fields: [luckyDrawId], references: [id])
  luckyDrawId          String
  asset                Asset?                 @relation(fields: [assetId], references: [id])
  assetId              String?
  LuckyDrawParticipant LuckyDrawParticipant[]

  @@unique([name, luckyDrawId])
  @@map("luckyDrawRewards")
}

model LuckyDrawParticipant {
  id                String  @id @default(uuid())
  name              String
  email             String
  phone             String
  isWinner          Boolean @default(false)
  luckyDrawId       String
  profileId         String?
  luckyDrawRewardId String?

  reward    LuckyDrawReward? @relation(fields: [luckyDrawRewardId], references: [id])
  luckyDraw LuckyDraw        @relation(fields: [luckyDrawId], references: [id])
  profile   Asset?           @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([luckyDrawId, name, phone])
  @@map("luckyDrawParticipants")
}

enum Action {
  read
  create
  update
  delete
}

enum ExamStatus {
  pending
  ongoing
  ended
}

enum LuckyDrawStatus {
  upcoming
  completed
}
